// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
    field Array _memory;
    field int _length;
    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
      if (maxLength > 0) {
        let _memory = Array.new(maxLength);
      } else {
        let _memory = 0;
      }
      let _length = 0;
      return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
      if (_memory > 0) {
        do _memory.dispose();
      }
      return;
    }

    /** Returns the current length of this String. */
    method int length() {
      return _length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
      return _memory[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
      let _memory[j] = c;
      return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
      let _memory[_length] = c;
      let _length = _length + 1;
      return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
      let _length = _length - 1;
      return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
      var int i;
      var int sign;
      var int v;
      if (_length = 0) { return 0; }
      let i = 0;
      let v = 0;
      if (_memory[0] = 45) {
        let sign = -1;
        let i = i + 1;
      } else {
        let sign = 1;
      }
      while (i < _length) {
        let v = v * 10 + (_memory[i] - 48);
        let i = i + 1;
      }
      if (sign < 0) {
        return -v;
      } else {
        return v;
      }
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
      let _length = 0;
      if (number < 0) {
        do appendChar(45); // minus sign
        do _setInt(-number);
      } else {
        do _setInt(number);
      }
      return;
    }

    method void _setInt(int number) {
      var int p, r;
      let p = number / 10;
      let r = number - (p * 10);
      if (p > 0) {
        do _setInt(p);
      }
      do appendChar(r + 48);
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
